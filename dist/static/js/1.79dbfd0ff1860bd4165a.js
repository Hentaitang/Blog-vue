webpackJsonp([1],{"/S12":function(t,s){},YE8u:function(t,s,a){"use strict";Object.defineProperty(s,"__esModule",{value:!0});var v={render:function(){var t=this.$createElement,s=this._self._c||t;return s("div",{attrs:{id:"detail"}},[s("section",{staticClass:"avatar"},[s("img",{attrs:{src:"http://cn.gravatar.com/avatar/1?s=128&d=identicon",alt:"avatar"}}),this._v(" "),s("h3",[this._v("前端异步大揭秘")]),this._v(" "),s("p",[s("router-link",{attrs:{to:"/user"}},[this._v("若愚")]),this._v(" 发布于3天前")],1)]),this._v(" "),this._m(0)])},staticRenderFns:[function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("section",{staticClass:"article"},[a("h1",{attrs:{id:"css-网格布局学习指南"}},[t._v("CSS 网格布局学习指南")]),t._v(" "),a("p",[t._v("CSS 网格布局(Grid Layout) 是CSS中最强大的布局系统。 这是一个二维系统，这意味着它可以同时处理列和行，不像 "),a("a",{attrs:{href:"https://css-tricks.com/snippets/css/a-guide-to-flexbox/",target:"_blank"}},[t._v("flexbox")]),t._v(" 那样主要是一维系统。 你可以通过将CSS规则应用于父元素（成为网格容器）和该元素的子元素（网格元素），来使用网格布局。")]),t._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:"https://css-tricks.com/snippets/css/complete-guide-grid/",target:"_blank"}},[t._v("本文")]),t._v("出自于 "),a("a",{attrs:{href:"http://chris.house/blog/a-complete-guide-css-grid-layout/",target:"_blank"}},[t._v("Chris House")]),t._v(" 的个人博客，由"),a("a",{attrs:{href:"https://jirengu.com",target:"_blank"}},[t._v("饥人谷")]),t._v(" "),a("a",{attrs:{href:"https://www.zhihu.com/people/jirengu-ruo-yu",target:"_blank"}},[t._v("若愚老师")]),t._v("翻译")])]),t._v(" "),a("h2",{attrs:{id:"引言"}},[t._v("引言")]),t._v(" "),a("p",[t._v("CSS网格布局（又名“网格”）是一个二维的基于网格的布局系统，其目的只在于完全改变我们设计基于网格的用户界面的方式。 CSS一直用来布局网页，但一直都不完美。 一开始我们使用table 做布局，然后转向浮动、定位以及inline-block，但所有这些方法本质上都是 Hack 的方式，并且遗漏了很多重要的功能（例如垂直居中）。 Flexbox的出现在一定程度上解决了这个问题，但是它的目的是为了更简单的一维布局，而不是复杂的二维布局（Flexbox和Grid实际上一起工作得很好）。 只要我们一直在制作网站，我们就一直在为解决布局问题不断探索，\n而Grid是第一个专门为解决布局问题而生的CSS模块。")]),t._v(" "),a("p",[t._v("有两个东西，启发我写这篇指南。 第一个是雷切尔·安德鲁（Rachel Andrew）的书"),a("a",{attrs:{href:"http://abookapart.com/products/get-ready-for-css-grid-layout",target:"_blank"}},[t._v("为CSS Grid布局准备")]),t._v("。 这本书对网格布局做了彻底、清晰的介绍，也是是整篇文章的基础，我强烈建议你购买并阅读他的书。 我的另一个重要灵感是Chris Coyier的"),a("a",{attrs:{href:"https://css-tricks.com/snippets/css/a-guide-to-flexbox/",target:"_blank"}},[t._v("Flexbox完全指南")]),t._v("，当需要查阅 flexbox 的一切资料时我就会找这篇文章。 这篇文章帮助了很多人学习 Flex 布局，也是 Google 上搜索“flexbox”关键字排名第一的文章。你会发现他的文章和我的很多相似之处，有最好的范例在那放着为什么咱不偷师学着写呢？")]),t._v(" "),a("p",[t._v("本指南的目的是介绍网格概念，因为它们存在于最新版本的规范中。 因此我不会覆盖过时的IE语法，而且随着规范的成熟，我会尽最大努力保存更新本指南。")]),t._v(" "),a("h2",{attrs:{id:"基础知识以及浏览器支持情况"}},[t._v("基础知识以及浏览器支持情况")]),t._v(" "),a("p",[t._v("一开始你需要使用"),a("code",[t._v("display：grid")]),t._v("把容器元素定义为一个网格，使用"),a("code",[t._v("grid-template-columns")]),t._v("和"),a("code",[t._v("grid-template-rows")]),t._v("设置列和行大小，然后使用"),a("code",[t._v("grid-column")]),t._v(" 和 "),a("code",[t._v("grid-row")]),t._v("把它的子元素放入网格。 与flexbox类似，网格子元素的原始顺序不重要。 你的可以在 CSS 里以任意顺序放置它们，这使得使用媒体查询重新排列网格变得非常容易。 想象一下，我们需要定义整个页面的布局，然后为了适应不同的屏幕宽度完全重新排列，我们只需要几行CSS就能实现这个需求。 网格是有史以来最强大的CSS模块之一。")]),t._v(" "),a("p",[t._v("截至2017年3月，许多浏览器都提供了原生的、不加前缀的对CSS Grid的支持，比如 Chrome（包括Android），Firefox，Safari（包括iOS）和Opera。 另一方面，Internet Explorer 10和11支持它，但需要使用过时的语法。 Edge浏览器已经宣布将支持标准的Grid语法，但暂未支持。")]),t._v(" "),a("blockquote",[a("p",[t._v("浏览器支持的详细数据可在"),a("a",{attrs:{href:"http://caniuse.com/#feat=css-grid",target:"_blank"}},[t._v("Caniuse")]),t._v("查看。其中里面的数字表示该版本以上的浏览器支持Grid。")])]),t._v(" "),a("h3",{attrs:{id:"桌面浏览器"}},[t._v("桌面浏览器")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("Chrome")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Opera")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Firefox")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("IE")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Edge")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Safari")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("57")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("44")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("52")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("11*")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("16")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("10.1")])])])]),t._v(" "),a("h3",{attrs:{id:"移动端--平板"}},[t._v("移动端 / 平板")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("iOS Safari")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Opera Mobile")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Opera Mini")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Android")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Android Chrome")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Android Firefox")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("10.3")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("No")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("No")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("62")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("62")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("57")])])])]),t._v(" "),a("p",[t._v("除了微软之外，浏览器制造商在 Grid 规范完全落地以前似乎并没有放手让 Gird 野生也长的打算。 这是一件好事，这意味着我们不需要再去学习各种浏览器兼容版本的旧语法。")]),t._v(" "),a("p",[t._v("在生产环境中使用Grid只是时间问题，但现在是我们该学习的时候了。")]),t._v(" "),a("h2",{attrs:{id:"重要术语"}},[t._v("重要术语")]),t._v(" "),a("p",[t._v("在深入了解网格的概念之前，理解术语是很重要的。 由于这里所涉及的术语在概念上都是相似的，如果不先记住它们在网格规范中定义的含义，则很容易将它们彼此混淆。 但是不用太担心，这些术语并不多。")]),t._v(" "),a("h3",{attrs:{id:"grid-container"}},[t._v("Grid Container")]),t._v(" "),a("p",[t._v("设置了 "),a("code",[t._v("display: gird")]),t._v(" 的元素。 这是所有 grid item 的直接父项。 在下面的例子中，"),a("code",[t._v(".container")]),t._v(" 就是是 grid container。")]),t._v(" "),a("pre",[a("code",{staticClass:"lang-html"},[a("span",{staticClass:"hljs-tag"},[t._v("<"),a("span",{staticClass:"hljs-name"},[t._v("div")]),t._v(" "),a("span",{staticClass:"hljs-attr"},[t._v("class")]),t._v("="),a("span",{staticClass:"hljs-string"},[t._v('"container"')]),t._v(">")]),t._v("\n  "),a("span",{staticClass:"hljs-tag"},[t._v("<"),a("span",{staticClass:"hljs-name"},[t._v("div")]),t._v(" "),a("span",{staticClass:"hljs-attr"},[t._v("class")]),t._v("="),a("span",{staticClass:"hljs-string"},[t._v('"item item-1"')]),t._v(">")]),a("span",{staticClass:"hljs-tag"},[t._v("</"),a("span",{staticClass:"hljs-name"},[t._v("div")]),t._v(">")]),t._v("\n  "),a("span",{staticClass:"hljs-tag"},[t._v("<"),a("span",{staticClass:"hljs-name"},[t._v("div")]),t._v(" "),a("span",{staticClass:"hljs-attr"},[t._v("class")]),t._v("="),a("span",{staticClass:"hljs-string"},[t._v('"item item-2"')]),t._v(">")]),a("span",{staticClass:"hljs-tag"},[t._v("</"),a("span",{staticClass:"hljs-name"},[t._v("div")]),t._v(">")]),t._v("\n  "),a("span",{staticClass:"hljs-tag"},[t._v("<"),a("span",{staticClass:"hljs-name"},[t._v("div")]),t._v(" "),a("span",{staticClass:"hljs-attr"},[t._v("class")]),t._v("="),a("span",{staticClass:"hljs-string"},[t._v('"item item-3"')]),t._v(">")]),a("span",{staticClass:"hljs-tag"},[t._v("</"),a("span",{staticClass:"hljs-name"},[t._v("div")]),t._v(">")]),t._v("\n"),a("span",{staticClass:"hljs-tag"},[t._v("</"),a("span",{staticClass:"hljs-name"},[t._v("div")]),t._v(">")]),t._v("\n")])]),t._v(" "),a("h3",{attrs:{id:"grid-item"}},[t._v("Grid Item")]),t._v(" "),a("p",[t._v("Grid 容器的孩子（直接子元素）。下面的 "),a("code",[t._v(".item")]),t._v(" 元素就是 grid item，但 "),a("code",[t._v(".sub-item")]),t._v("不是。")]),t._v(" "),a("pre",[a("code",{staticClass:"lang-html"},[a("span",{staticClass:"hljs-tag"},[t._v("<"),a("span",{staticClass:"hljs-name"},[t._v("div")]),t._v(" "),a("span",{staticClass:"hljs-attr"},[t._v("class")]),t._v("="),a("span",{staticClass:"hljs-string"},[t._v('"container"')]),t._v(">")]),t._v("\n  "),a("span",{staticClass:"hljs-tag"},[t._v("<"),a("span",{staticClass:"hljs-name"},[t._v("div")]),t._v(" "),a("span",{staticClass:"hljs-attr"},[t._v("class")]),t._v("="),a("span",{staticClass:"hljs-string"},[t._v('"item"')]),t._v(">")]),a("span",{staticClass:"hljs-tag"},[t._v("</"),a("span",{staticClass:"hljs-name"},[t._v("div")]),t._v(">")]),t._v(" \n  "),a("span",{staticClass:"hljs-tag"},[t._v("<"),a("span",{staticClass:"hljs-name"},[t._v("div")]),t._v(" "),a("span",{staticClass:"hljs-attr"},[t._v("class")]),t._v("="),a("span",{staticClass:"hljs-string"},[t._v('"item"')]),t._v(">")]),t._v("\n    "),a("span",{staticClass:"hljs-tag"},[t._v("<"),a("span",{staticClass:"hljs-name"},[t._v("p")]),t._v(" "),a("span",{staticClass:"hljs-attr"},[t._v("class")]),t._v("="),a("span",{staticClass:"hljs-string"},[t._v('"sub-item"')]),t._v(">")]),a("span",{staticClass:"hljs-tag"},[t._v("</"),a("span",{staticClass:"hljs-name"},[t._v("p")]),t._v(">")]),t._v("\n  "),a("span",{staticClass:"hljs-tag"},[t._v("</"),a("span",{staticClass:"hljs-name"},[t._v("div")]),t._v(">")]),t._v("\n  "),a("span",{staticClass:"hljs-tag"},[t._v("<"),a("span",{staticClass:"hljs-name"},[t._v("div")]),t._v(" "),a("span",{staticClass:"hljs-attr"},[t._v("class")]),t._v("="),a("span",{staticClass:"hljs-string"},[t._v('"item"')]),t._v(">")]),a("span",{staticClass:"hljs-tag"},[t._v("</"),a("span",{staticClass:"hljs-name"},[t._v("div")]),t._v(">")]),t._v("\n"),a("span",{staticClass:"hljs-tag"},[t._v("</"),a("span",{staticClass:"hljs-name"},[t._v("div")]),t._v(">")]),t._v("\n")])]),t._v(" "),a("h3",{attrs:{id:"grid-line"}},[t._v("Grid Line")]),t._v(" "),a("p",[t._v("这个分界线组成网格结构。 它们既可以是垂直的（“column grid lines”），也可以是水平的（“row grid lines”），并位于行或列的任一侧。 下面例中的黄线就是一个列网格线。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cloud.hunger-valley.com/18-1-11/48497835.jpg",alt:""}})]),t._v(" "),a("h3",{attrs:{id:"grid-track"}},[t._v("Grid Track")]),t._v(" "),a("p",[t._v("两个相邻网格线之间的空间。 你可以把它们想象成网格的列或行。 下面是第二行和第三行网格线之间的网格轨道。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cloud.hunger-valley.com/18-1-11/44840078.jpg",alt:""}})]),t._v(" "),a("h3",{attrs:{id:"grid-cell"}},[t._v("Grid Cell")]),t._v(" "),a("p",[t._v("两个相邻的行和两个相邻的列网格线之间的空间。它是网格的一个“单元”。 下面是行网格线1和2之间以及列网格线2和3的网格单元。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cloud.hunger-valley.com/18-1-11/38456584.jpg",alt:""}})]),t._v(" "),a("h3",{attrs:{id:"grid-area"}},[t._v("Grid Area")]),t._v(" "),a("p",[t._v("四个网格线包围的总空间。 网格区域可以由任意数量的网格单元组成。 下面是行网格线1和3以及列网格线1和3之间的网格区域。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cloud.hunger-valley.com/18-1-11/38612829.jpg",alt:""}})]),t._v(" "),a("h2",{attrs:{id:"grid-属性列表"}},[t._v("Grid 属性列表")]),t._v(" "),a("p",[t._v("Grid Container 的全部属性")]),t._v(" "),a("ul",[a("li",[t._v("display")]),t._v(" "),a("li",[t._v("grid-template-columns")]),t._v(" "),a("li",[t._v("grid-template-rows")]),t._v(" "),a("li",[t._v("grid-template-areas")]),t._v(" "),a("li",[t._v("grid-template")]),t._v(" "),a("li",[t._v("grid-column-gap")]),t._v(" "),a("li",[t._v("grid-row-gap")]),t._v(" "),a("li",[t._v("grid-gap")]),t._v(" "),a("li",[t._v("justify-items")]),t._v(" "),a("li",[t._v("align-items")]),t._v(" "),a("li",[t._v("justify-content")]),t._v(" "),a("li",[t._v("align-content")]),t._v(" "),a("li",[t._v("grid-auto-columns")]),t._v(" "),a("li",[t._v("grid-auto-rows")]),t._v(" "),a("li",[t._v("grid-auto-flow")]),t._v(" "),a("li",[t._v("grid")])]),t._v(" "),a("p",[t._v("Grid Items 的全部属性")]),t._v(" "),a("ul",[a("li",[t._v("grid-column-start")]),t._v(" "),a("li",[t._v("grid-column-end")]),t._v(" "),a("li",[t._v("grid-row-start")]),t._v(" "),a("li",[t._v("grid-row-end")]),t._v(" "),a("li",[t._v("grid-column")]),t._v(" "),a("li",[t._v("grid-row")]),t._v(" "),a("li",[t._v("grid-area")]),t._v(" "),a("li",[t._v("justify-self")]),t._v(" "),a("li",[t._v("align-self")])])])}]};var i=a("VU/8")({name:"HelloWorld",data:function(){return{msg:"Welcome to Your Vue.js App"}}},v,!1,function(t){a("/S12")},"data-v-a89c9e24",null);s.default=i.exports}});
//# sourceMappingURL=1.79dbfd0ff1860bd4165a.js.map